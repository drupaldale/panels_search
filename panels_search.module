<?php

function panels_search_init() {
}


function panels_search_ctools_plugin_directory($owner, $plugin_type) {
  // We'll be nice and limit scandir() calls.
  if ($owner == 'ctools' && ($plugin_type == 'contexts' || 
    $plugin_type == 'content_types' || $plugin_type == 'facetapi')) {
    return 'plugins/' . $plugin_type;
  }
}

function panels_search_get_view($view_name=NULL) {
  $views = &drupal_static(__FUNCTION__, array());
  if (empty($view_name)) {
    $view = current($views);
    return $view;
  }
  if (isset($views[$view_name])) {
    $view = $views[$view_name];
    return $view;
  }
  $view = views_get_view($view_name);
  if (empty($view)) {
    return $view;
  }
  $view->set_display("default");
  $view->dom_id = 'panels_search_form';
  $view->init_handlers();
  $path = panels_search_path();
  $view->override_url = $path;

  $views[$view_name] = $view;
  return $view;
}

function panels_search_search_views() {
  $names = array();
  $indexes = search_api_index_load_multiple(FALSE);
  foreach (views_get_all_views() as $name => $view) {
    if ($view->disabled) {
      continue;
    }
    foreach ($indexes as $key => $index) {
      $table = 'search_api_index_' . $index->machine_name;
      if ($view->base_table == $table) {
        $names[] = $name;
        break;
      }
    }
  }
  return $names;
}

/**
 * Simplified version of views_plugin_exposed_form->render_exposed_form.
 * This will always render the exposed form.
 */
function panels_search_render_exposed_form(&$view) {
  // Deal with any exposed filters we may have, before building.
  $exposed_form = $view->display_handler->get_plugin('exposed_form');
  $form_state = array(
    'view' => &$exposed_form->view,
    'display' => &$exposed_form->display,
    'method' => 'get',
    'rerender' => TRUE,
    'no_redirect' => TRUE,
    'always_process' => TRUE,
  );

  $form_state['exposed_form_plugin'] = $exposed_form;
  $form = drupal_build_form('views_exposed_form', $form_state);
  $output = drupal_render($form);

  return $output;
}

function panels_search_path() {
  $path = $_GET['q'];
  $menu = menu_get_item();
  return $menu['path'];
}

/**
 * Returns a hash of the SearchAPI Indexes that
 * support FacetAPI. 
 *
 * Note: Staticly cached.
 */
function panels_search_facet_indexes() {
  $facet_indexes = &drupal_static(__FUNCTION__, NULL);
  if(isset($facet_indexes)) {
    return $facet_indexes;
  }

  $indexes = search_api_index_load_multiple(FALSE);
  $facet_indexes = array();
  foreach ($indexes as $key => $index) {
    if (!$index->enabled || !$index->server()->supportsFeature('search_api_facets')) {
      continue;
    }
    $facet_indexes[$key] = $index;
  }
  return $facet_indexes;
}

/**
 * Register the search facet
 */
function panels_search_register_facet($field, $settings = array()) {
  $facet_registry = &drupal_static('panels_search_facet_registry', array());
  $facet_registry[$field] = $settings;
}

/**
 * Returns the facets registered programatically via panels_search_register_facet
 *
 * Currently this only happens via the ctools facet blocks
 */
function panels_search_facet_registry($searcher, &$adapter) {
  $facet_registry = &drupal_static('panels_search_facet_registry', array());

  $facets = array();
  // Gets cached settings, finds enabled facets.
  $cached = facetapi_get_searcher_settings($searcher);
  foreach ($cached as $name => $settings) {
    $facet = $settings->facet;
    if(isset($facet_registry[$facet])) {
      $facets[$facet] = $facet;
    }
  }
  $facet_info = facetapi_get_facet_info($searcher);
  $enabled_facets = array_intersect_key($facet_info, $facets);
  //dpm($adapter->getFacet($enabled_facets['field_product_market'])->getSettings('block')->settings);
  return $enabled_facets;
}

function panels_search_panels_pre_render(&$display, &$renderer) {
}

function panels_search_search_api_query_alter($query) {
}

function panels_search_ctools_plugin_post_alter(&$plugin, &$info) {
  // only modify facetapi adapters
  if ($info['module'] != 'facetapi' || $info['type'] != 'adapters') {
    return;
  }

  // change the Adapter class to our own
  if($plugin['module'] == 'search_api_facetapi') {
    $plugin['handler']['class'] = 'PanelsSearchFacetapiAdapter';
  }
}

/**
 * All facets have the rewrite filter enabled. 
 * @see PanelsSearchFacetapiAdapter::getFacetSettings
 */
function panels_search_facet_items_alter(&$build, &$settings) {
}

/**
 * Implements hook_facetapi_facet_info_alter().
 */
function panels_search_facetapi_facet_info_alter(&$facet_info, $searcher_info) {
  foreach ($facet_info as &$facet) {
    $facet['dependency plugins'][] = 'panels_search';
  }
}

/**
 * Implements hook_facetapi_dependencies().
 */
function panels_search_facetapi_dependencies() {
  return array(
    'panels_search' => array(
      'handler' => array(
        'label' => t('Panels Search Dependecy'),
        'class' => 'FacetapiDependencyPanelsSearch',
      ),
    ),
  );
}

?>
